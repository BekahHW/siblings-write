name: PostHog Session Analysis with Continue CLI Agent

on:
  schedule: 
  - cron: "0 6 * * *" # Run at 6 AM UTC daily
  workflow_dispatch: # Allow manual triggering

jobs:
  analyze:
    runs-on: ubuntu-latest

    permissions:
        contents: read
        issues: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Install Continue CLI
      run: |
        echo "Installing Continue CLI..."
        npm install -g @continuedev/cli
        echo "Installation completed"
        
    - name: Test PostHog Connection
      env:
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
      run: |
        echo "üîå Step 3: Testing PostHog API connection"
        echo "Testing PostHog query first..."

        # Run the command and capture exit code - using the same prompt that works in TUI
        if timeout 60s cn --config continuedev/awesome-models-posthog-gh -p "Using the MCP and my prompts, tell me about my posthog recording sessions data" > posthog_simple.md 2>posthog_simple_error.log; then
          EXIT_CODE=0
        else
          EXIT_CODE=$?
        fi
        
        echo "Command exit code: $EXIT_CODE"
        echo "Files after test:"
        ls -la *.md *.log 2>/dev/null || echo "No .md or .log files found"
        
        # Check if files were created and show their contents
        if [ -f "posthog_simple.md" ]; then
          echo "Response file size: $(wc -c < posthog_simple.md) bytes"
          echo "Response content:"
          cat posthog_simple.md || echo "Cannot read response file"
        else
          echo "‚ùå Response file not created"
        fi
        
        if [ -f "posthog_simple_error.log" ]; then
          echo "Error file size: $(wc -c < posthog_simple_error.log) bytes"
          echo "Error content:"
          cat posthog_simple_error.log || echo "Cannot read error file"
        else
          echo "‚ùå Error file not created"
        fi
      
    
    - name: Create GitHub Issues from Analysis
      env:
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üêõ Step 4: Creating GitHub issues from PostHog analysis"
        echo "Using previous analysis to create issues (60s timeout)"
        
        if timeout 60s cn --config continuedev/awesome-models-posthog-gh -p "Based on the PostHog analysis you just performed, create GitHub issues for the top 3 UX problems you identified. Use the gh CLI to create the issues in this repository. Execute: gh issue create --title '[Title]' --body '[Details]' --label 'automated'" > github_issues.md 2>github_error.log; then
          echo "‚úÖ GitHub issue creation SUCCESS"
          echo "=================================="
          echo "GitHub Issues Created:"
          cat github_issues.md
          echo "=================================="
        else
          echo "‚ùå GitHub issue creation FAILED"
          echo "Error log:"
          cat github_error.log
        fi
      
    
    - name: Debug - Post-execution info
      if: always()  # Run even if previous steps fail
      run: |
        echo "üìã Detailed workflow execution summary:"
        echo "Step 1 - Agent Configuration: Check logs above"
        echo "Step 2 - PostHog Agent Config: Check logs above"
        echo "Step 3 - PostHog Connection: Check logs above"
        echo "Step 4 - PostHog Data Access: Check logs above"
        echo "Step 5 - Session Recording Access: Check logs above"
        echo "Step 6 - Limited Analysis: Check logs above"
        echo "Step 7 - GitHub Issues: Check logs above"
        echo ""
        echo "üîç Look for ‚úÖ or ‚ùå indicators in each step"
        echo "‚è±Ô∏è All steps have short timeouts to identify hang points"
        echo "üéØ This will help identify exactly where the connection fails"

    - name: Summary
      run: |
        echo "‚úÖ PostHog analysis workflow completed!"
        echo "üìä Check the artifacts for detailed analysis results"
        echo "üêõ Check your repository issues for newly created UX issues"
        echo "ü§ñ Agent automatically handled both analysis and issue creation"
