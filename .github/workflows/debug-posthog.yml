name: PostHog Session Analysis - Improved Debug

on:
  workflow_dispatch: # Manual triggering for testing

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
        contents: read
        issues: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Install Continue CLI
      run: |
        echo "Installing Continue CLI..."
        npm install -g @continuedev/cli

    - name: Test PostHog Connection with Better Error Handling
      env:
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
      run: |
        echo "🔌 Testing PostHog connection with better error handling:"
        echo "================================================="
        
        # Test 1: Very simple PostHog query
        echo "Test 1: Simple PostHog test..."
        timeout 30s cn --config continuedev/awesome-models-posthog-gh -p "Can you access PostHog data? Just say yes or no." 2>&1 | tee posthog_simple.log &
        PID=$!
        
        # Monitor the process
        for i in {1..30}; do
          if ! kill -0 $PID 2>/dev/null; then
            echo "Process completed after ${i} seconds"
            break
          fi
          echo "Still running... ${i}s"
          sleep 1
        done
        
        # If still running, kill it
        if kill -0 $PID 2>/dev/null; then
          echo "Killing hung process..."
          kill $PID
          echo "❌ PostHog test hung after 30 seconds"
        fi
        
        echo "PostHog simple test output:"
        cat posthog_simple.log 2>/dev/null || echo "No output generated"

    - name: Test GitHub CLI Setup Separately
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        echo "🐙 Testing GitHub CLI setup:"
        echo "============================="
        
        # Debug GitHub CLI setup
        echo "GitHub CLI version:"
        gh --version
        
        echo "Attempting GitHub CLI authentication..."
        echo "$GITHUB_TOKEN" | gh auth login --with-token 2>&1 || {
          echo "❌ GitHub CLI auth failed with exit code: $?"
          echo "Token length: ${#GITHUB_TOKEN}"
          echo "First 4 chars: ${GITHUB_TOKEN:0:4}..."
        }
        
        echo "Checking auth status..."
        gh auth status 2>&1 || echo "Auth status check failed"
        
        # Test repository detection
        echo "Testing repository detection..."
        REPO_SLUG=$(git remote get-url origin 2>/dev/null | sed -E 's#.*github.com[:/](.+)\.git#\1#' 2>/dev/null) || REPO_SLUG=""
        
        if [ -n "$REPO_SLUG" ]; then
          echo "✅ Repository detected: $REPO_SLUG"
          
          # Test basic gh command
          echo "Testing basic gh repo view..."
          gh repo view "$REPO_SLUG" --json name,owner 2>&1 || echo "Repo view failed"
          
        else
          echo "❌ Could not detect repository slug"
          echo "Git remote URL:"
          git remote get-url origin 2>&1 || echo "No git remote found"
        fi

    - name: Test Continue with GitHub CLI Integration
      env:
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        echo "🤖 Testing Continue CLI with GitHub integration:"
        echo "================================================"
        
        # Get repo slug first
        REPO_SLUG=$(git remote get-url origin 2>/dev/null | sed -E 's#.*github.com[:/](.+)\.git#\1#' 2>/dev/null)
        
        if [ -z "$REPO_SLUG" ]; then
          echo "❌ Cannot proceed without repository slug"
          exit 1
        fi
        
        echo "Using repository: $REPO_SLUG"
        
        # Simple Continue command that should work
        echo "Testing Continue CLI with simple GitHub task..."
        timeout 45s cn --config continuedev/awesome-models-posthog-gh -p "Execute this exact command: echo 'GitHub integration test successful'" 2>&1 | tee github_integration.log &
        PID=$!
        
        # Monitor with shorter intervals
        for i in {1..45}; do
          if ! kill -0 $PID 2>/dev/null; then
            echo "GitHub integration test completed after ${i} seconds"
            break
          fi
          if [ $((i % 5)) -eq 0 ]; then
            echo "Still running... ${i}s"
          fi
          sleep 1
        done
        
        # Clean up if hung
        if kill -0 $PID 2>/dev/null; then
          echo "Killing hung process..."
          kill $PID
          echo "❌ GitHub integration test hung"
        fi
        
        echo "GitHub integration test output:"
        cat github_integration.log 2>/dev/null || echo "No output generated"

    - name: Final Debug Summary
      if: always()
      run: |
        echo "📊 FINAL DEBUG ANALYSIS:"
        echo "========================="
        
        echo "✅ Continue CLI: Working (version 1.4.44)"
        echo "✅ Config Load: Working (continuedev/awesome-models-posthog-gh)"
        echo ""
        
        echo "❓ PostHog Connection:"
        if [ -f posthog_simple.log ] && [ -s posthog_simple.log ]; then
          echo "Has output - check content above"
        else
          echo "❌ No output or hanging - MCP connection issue likely"
        fi
        echo ""
        
        echo "❓ GitHub CLI Setup:"
        gh auth status 2>&1 && echo "✅ GitHub CLI authenticated" || echo "❌ GitHub CLI authentication failed"
        echo ""
        
        echo "❓ Continue + GitHub Integration:"
        if [ -f github_integration.log ] && [ -s github_integration.log ]; then
          echo "Has output - check content above"
        else
          echo "❌ No output or hanging"
        fi
        
        echo ""
        echo "🎯 NEXT STEPS BASED ON RESULTS:"
        echo "- If PostHog test hangs: MCP server connection issue"
        echo "- If GitHub CLI fails: Token permissions issue"
        echo "- If Continue hangs on simple commands: Model/assistant configuration issue"
        
        echo ""
        echo "📁 All log files:"
        ls -la *.log 2>/dev/null || echo "No log files found"
        
        for logfile in *.log; do
          if [ -f "$logfile" ]; then
            echo ""
            echo "=== $logfile ==="
            cat "$logfile"
          fi
        done