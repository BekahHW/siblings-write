name: PostHog Session Analysis via Continue Agent

on:
  schedule:
    - cron: "0 6 * * *" # Run at 6 AM UTC daily
  workflow_dispatch: # Allow manual triggering

jobs:
  analyze-and-create-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22" # Continue CLI requires Node 22+

      - name: Install Continue CLI
        run: |
          echo "üì¶ Installing Continue CLI..."
          # Install as local package to avoid global installation issues
          npm install @continuedev/cli

          # Verify installation
          echo "‚úÖ Continue CLI version: $(npx @continuedev/cli --version)"

      - name: Test Continue Agent Configuration
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}  # Add API key here!
        run: |
          echo "üîß Testing Continue Agent Configuration..."
          echo "=========================================="
          
          # First, initialize and wait for MCP connections
          echo "Initializing agent and MCP connections..."
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "Hello, please confirm you're ready" 2>&1 | tee init.log
          
          # Give MCP servers time to connect
          echo "Waiting for MCP connections to establish..."
          sleep 5
          
          # Now check for PostHog MCP tools
          echo ""
          echo "Checking PostHog MCP availability:"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "Do you have PostHog MCP configured? Can you access PostHog data? What PostHog-specific tools are available to you?" 2>&1 | tee posthog_check.log
          
          # Get configuration details
          echo ""
          echo "Getting configuration details:"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "Tell me about your current configuration: What agent/assistant configuration are you using? What's your context window size? What tools are enabled?" 2>&1 | tee config_details.log
          
          if [ -s posthog_check.log ]; then
            echo "‚úÖ Agent is responding"
          else
            echo "‚ùå No response from agent"
            exit 1
          fi

      - name: Analyze PostHog Session Recordings
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 10
        run: |
          echo "üìä Analyzing PostHog session recordings..."
          echo "========================================="

          # The agent has PostHog MCP configured, so it can directly access PostHog data
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Using your PostHog MCP tools, analyze recent session recordings to identify the top 3 UX issues.

          Instructions:
          1. Access PostHog session recordings from the last 24-48 hours
          2. Look for patterns of user friction, errors, or confusion
          3. Focus on accessibility issues and navigation problems
          4. Identify specific pages/components with issues

          For each of the top 3 issues found, provide:
          - Issue Title
          - Description with specific evidence from sessions
          - Steps to Reproduce
          - User Impact (with metrics if available)
          - Priority (High/Medium/Low)
          - Affected Component/Page

          Format your response clearly with numbered issues.
          " 2>&1 | tee analysis.log || {
            echo "‚ö†Ô∏è Analysis completed with warnings"
          }

          echo ""
          if [ -s analysis.log ]; then
            echo "‚úÖ Analysis complete ($(wc -l < analysis.log) lines)"
            echo "Preview of results:"
            head -20 analysis.log
          else
            echo "‚ùå No analysis output captured"
          fi

      - name: Create GitHub Issues from Analysis
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 5
        run: |
          echo "üêõ Creating GitHub issues..."
          echo "============================"

          # Check if we have analysis results
          if [ ! -f analysis.log ] || [ ! -s analysis.log ]; then
            echo "‚ö†Ô∏è No analysis results found, skipping issue creation"
            exit 0
          fi

          # Create issues based on the analysis
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Based on the PostHog analysis I just completed, create GitHub issues for the UX problems found.

          Important: Execute these GitHub CLI commands to create the issues:

          For each issue:
          1. First check if a similar issue exists:
             gh issue list --repo '$GITHUB_REPOSITORY' --search 'keywords from title' --state open

          2. If no duplicate exists, create the issue:
             gh issue create --repo '$GITHUB_REPOSITORY' \\
               --title '[UX] Specific Issue Title' \\
               --body 'Detailed description with PostHog evidence' \\
               --label 'bug,ux,posthog-analysis,automated'

          Execute these commands now to create up to 3 issues.
          Include the PostHog session evidence in each issue body.
          " 2>&1 | tee creation.log || {
            echo "‚ö†Ô∏è Issue creation completed with warnings"
          }

          if [ -s creation.log ]; then
            echo "‚úÖ Issue creation attempted"
          else
            echo "‚ùå No issue creation output"
          fi

      - name: Verify Results
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: always()
        run: |
          echo "‚úÖ Verification and Summary"
          echo "==========================="

          # Check for newly created issues
          echo "Checking for automated issues:"
          gh issue list --repo "$GITHUB_REPOSITORY" \
            --label "automated" \
            --limit 5 \
            --json number,title,createdAt,labels \
            --jq '.[] | "Issue #\(.number): \(.title)\n  Created: \(.createdAt)\n  Labels: \(.labels | map(.name) | join(", "))\n"' || {
            echo "No automated issues found or jq parsing failed"
            gh issue list --repo "$GITHUB_REPOSITORY" --label "automated" --limit 5
          }

          echo ""
          echo "üìã Execution Summary:"
          echo "- Continue CLI: $(npx @continuedev/cli --version 2>/dev/null && echo '‚úÖ Working' || echo '‚ùå Not working')"
          echo "- Agent configured: $([ -s posthog_check.log ] && echo '‚úÖ Yes' || echo '‚ùå No')"
          echo "- Analysis: $([ -s analysis.log ] && echo '‚úÖ Generated' || echo '‚ùå Failed')"
          echo "- Issue creation: $([ -s creation.log ] && echo '‚úÖ Attempted' || echo '‚ùå Not attempted')"

          # Show brief output preview
          if [ -f analysis.log ] && [ -s analysis.log ]; then
            echo ""
            echo "üìä Analysis Preview (first 10 lines):"
            head -10 analysis.log
          fi
          
          if [ -f posthog_check.log ] && [ -s posthog_check.log ]; then
            echo ""
            echo "üîå PostHog MCP Status:"
            grep -i "posthog\|mcp\|tool" posthog_check.log | head -5
          fi