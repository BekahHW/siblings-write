name: PostHog Session Analysis via Continue Agent

on:
  schedule: 
    - cron: "0 6 * * *" # Run at 6 AM UTC daily
  workflow_dispatch: # Allow manual triggering

jobs:
  analyze-and-create-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "22"  # Continue CLI requires Node 22+

    - name: Install Continue CLI
      run: |
        echo "📦 Installing Continue CLI..."
        # Install as local package to avoid global installation issues
        npm install @continuedev/cli
        
        # Verify installation
        echo "✅ Continue CLI version: $(npx @continuedev/cli --version)"

    - name: Test Continue Agent with PostHog MCP
      env:
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
      run: |
        echo "🔧 Testing Continue Agent..."
        echo "============================="
        
        # The agent 'continuedev/awesome-models-posthog-gh' includes PostHog MCP configuration
        # No need for separate PostHog API keys - they're configured in the agent on Continue Hub
        
        echo "Testing agent with built-in PostHog MCP:"
        npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "Can you access PostHog data through your MCP tools?" 2>&1 | tee test.log
        
        if [ -s test.log ]; then
          echo "✅ Agent is responding"
        else
          echo "❌ No response from agent"
          exit 1
        fi

    - name: Analyze PostHog Session Recordings
      env:
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      timeout-minutes: 10
      run: |
        echo "📊 Analyzing PostHog session recordings..."
        echo "========================================="
        
        # The agent has PostHog MCP configured, so it can directly access PostHog data
        npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
        Using your PostHog MCP tools, analyze recent session recordings to identify the top 3 UX issues.

        Instructions:
        1. Access PostHog session recordings from the last 24-48 hours
        2. Look for patterns of user friction, errors, or confusion
        3. Focus on accessibility issues and navigation problems
        4. Identify specific pages/components with issues

        For each of the top 3 issues found, provide:
        - Issue Title
        - Description with specific evidence from sessions
        - Steps to Reproduce
        - User Impact (with metrics if available)
        - Priority (High/Medium/Low)
        - Affected Component/Page

        Format your response clearly with numbered issues.
        " 2>&1 | tee analysis.log || {
          echo "⚠️ Analysis completed with warnings"
        }
        
        echo ""
        if [ -s analysis.log ]; then
          echo "✅ Analysis complete ($(wc -l < analysis.log) lines)"
          echo "Preview of results:"
          head -20 analysis.log
        else
          echo "❌ No analysis output captured"
        fi

    - name: Create GitHub Issues from Analysis
      env:
        CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      timeout-minutes: 5
      run: |
        echo "🐛 Creating GitHub issues..."
        echo "============================"
        
        # Check if we have analysis results
        if [ ! -f analysis.log ] || [ ! -s analysis.log ]; then
          echo "⚠️ No analysis results found, skipping issue creation"
          exit 0
        fi
        
        # Create issues based on the analysis
        npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
        Based on the PostHog analysis I just completed, create GitHub issues for the UX problems found.

        Important: Execute these GitHub CLI commands to create the issues:

        For each issue:
        1. First check if a similar issue exists:
           gh issue list --repo '$GITHUB_REPOSITORY' --search 'keywords from title' --state open

        2. If no duplicate exists, create the issue:
           gh issue create --repo '$GITHUB_REPOSITORY' \\
             --title '[UX] Specific Issue Title' \\
             --body 'Detailed description with PostHog evidence' \\
             --label 'bug,ux,posthog-analysis,automated'

        Execute these commands now to create up to 3 issues.
        Include the PostHog session evidence in each issue body.
        " 2>&1 | tee creation.log || {
          echo "⚠️ Issue creation completed with warnings"
        }
        
        if [ -s creation.log ]; then
          echo "✅ Issue creation attempted"
        else
          echo "❌ No issue creation output"
        fi

    - name: Verify Results
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: always()
      run: |
        echo "✅ Verification and Summary"
        echo "==========================="
        
        # Check for newly created issues
        echo "Checking for automated issues:"
        gh issue list --repo "$GITHUB_REPOSITORY" \
          --label "automated" \
          --limit 5 \
          --json number,title,createdAt,labels \
          --jq '.[] | "Issue #\(.number): \(.title)\n  Created: \(.createdAt)\n  Labels: \(.labels | map(.name) | join(", "))\n"' || {
          echo "No automated issues found or jq parsing failed"
          gh issue list --repo "$GITHUB_REPOSITORY" --label "automated" --limit 5
        }
        
        echo ""
        echo "📋 Execution Summary:"
        echo "- Continue CLI: $(npx @continuedev/cli --version 2>/dev/null && echo '✅ Working' || echo '❌ Not working')"
        echo "- Agent test: $([ -s test.log ] && echo '✅ Responding' || echo '❌ Not responding')"
        echo "- Analysis: $([ -s analysis.log ] && echo '✅ Generated' || echo '❌ Failed')"
        echo "- Issue creation: $([ -s creation.log ] && echo '✅ Attempted' || echo '❌ Not attempted')"
        
        # Show brief output preview
        if [ -f analysis.log ] && [ -s analysis.log ]; then
          echo ""
          echo "📊 Analysis Preview (first 10 lines):"
          head -10 analysis.log
        fi