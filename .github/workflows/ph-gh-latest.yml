name: PostHog Session Analysis via Continue Agent (With MCP Load Delays)

on:
  schedule:
    - cron: "0 6 * * *" # Run at 6 AM UTC daily
  workflow_dispatch: # Allow manual triggering

jobs:
  analyze-and-create-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22" # Continue CLI requires Node 22+

      - name: Install Continue CLI
        run: |
          echo "üì¶ Installing Continue CLI..."
          npm install @continuedev/cli
          echo "‚úÖ Continue CLI version: $(npx @continuedev/cli --version)"

      - name: Initialize Agent and Wait for MCP
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "üöÄ INITIALIZING AGENT AND MCP CONNECTIONS"
          echo "=========================================="
          
          # First call to initialize the agent and start MCP connections
          echo "Step 1: Initial agent activation..."
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "Hello, initializing" 2>&1 | tee init1.log
          
          # Give MCP servers more time to connect (10 seconds)
          echo ""
          echo "‚è≥ Waiting 10 seconds for MCP servers to fully connect..."
          sleep 10
          
          # Second call to check if MCP is now available
          echo ""
          echo "Step 2: Checking MCP availability after delay..."
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "List all your available MCP servers and tools" 2>&1 | tee init2.log
          
          # Additional wait if needed
          echo ""
          echo "‚è≥ Additional 5 second wait for stability..."
          sleep 5
          
          # Final check specifically for PostHog
          echo ""
          echo "Step 3: Final PostHog MCP verification..."
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "Do you have PostHog MCP tools available? List any PostHog-specific functions you can use." 2>&1 | tee posthog_check.log
          
          # Check if PostHog is mentioned
          if grep -qi "posthog" posthog_check.log; then
            echo ""
            echo "‚úÖ PostHog MCP appears to be available"
          else
            echo ""
            echo "‚ö†Ô∏è PostHog MCP may not be available"
            echo "Attempting one more initialization with longer wait..."
            
            # One more attempt with even longer wait
            sleep 15
            npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "After waiting, do you now have PostHog MCP tools?" 2>&1 | tee posthog_retry.log
          fi

      - name: Analyze PostHog Session Recordings
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 10
        run: |
          echo "üìä Analyzing PostHog session recordings..."
          echo "========================================="
          
          # Add a small delay before the main analysis to ensure stability
          echo "‚è≥ Ensuring MCP connection stability..."
          sleep 3
          
          # Main analysis with PostHog MCP
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Using your PostHog MCP tools, analyze recent session recordings to identify the top 3 UX issues.
          
          If PostHog MCP tools are not available, please state that clearly and provide a simulated analysis instead.
          
          Instructions for PostHog analysis:
          1. Access PostHog session recordings from the last 24-48 hours
          2. Look for patterns of user friction, errors, or confusion
          3. Focus on accessibility issues and navigation problems
          4. Identify specific pages/components with issues
          
          For each of the top 3 issues found, provide:
          - Issue Title
          - Description with specific evidence from sessions
          - Steps to Reproduce
          - User Impact (with metrics if available)
          - Priority (High/Medium/Low)
          - Affected Component/Page
          
          Format your response clearly with numbered issues.
          " 2>&1 | tee analysis.log || {
            echo "‚ö†Ô∏è Analysis completed with warnings"
          }
          
          echo ""
          if [ -s analysis.log ]; then
            echo "‚úÖ Analysis complete ($(wc -l < analysis.log) lines)"
            echo "Preview of results:"
            head -20 analysis.log
          else
            echo "‚ùå No analysis output captured"
          fi

      - name: Create GitHub Issues from Analysis
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 5
        run: |
          echo "üêõ Creating GitHub issues..."
          echo "============================"
          
          # Check if we have analysis results
          if [ ! -f analysis.log ] || [ ! -s analysis.log ]; then
            echo "‚ö†Ô∏è No analysis results found, skipping issue creation"
            exit 0
          fi
          
          # Small delay to ensure session continuity
          sleep 2
          
          # Create issues based on the analysis
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Based on the PostHog analysis I just completed, create GitHub issues for the UX problems found.
          
          Important: Execute these GitHub CLI commands to create the issues:
          
          For each issue:
          1. First check if a similar issue exists:
             gh issue list --repo '$GITHUB_REPOSITORY' --search 'keywords from title' --state open
          
          2. If no duplicate exists, create the issue:
             gh issue create --repo '$GITHUB_REPOSITORY' \\
               --title '[UX] Specific Issue Title' \\
               --body 'Detailed description with PostHog evidence' \\
               --label 'bug,ux,posthog-analysis,automated'
          
          Execute these commands now to create up to 3 issues.
          Include the PostHog session evidence in each issue body.
          " 2>&1 | tee creation.log || {
            echo "‚ö†Ô∏è Issue creation completed with warnings"
          }
          
          if [ -s creation.log ]; then
            echo "‚úÖ Issue creation attempted"
          else
            echo "‚ùå No issue creation output"
          fi

      - name: Verify Results
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: always()
        run: |
          echo "‚úÖ Verification and Summary"
          echo "==========================="
          
          # Check for newly created issues
          echo "Checking for automated issues:"
          gh issue list --repo "$GITHUB_REPOSITORY" \
            --label "automated" \
            --limit 5 \
            --json number,title,createdAt,labels \
            --jq '.[] | "Issue #\(.number): \(.title)\n  Created: \(.createdAt)\n  Labels: \(.labels | map(.name) | join(", "))\n"' || {
            echo "No automated issues found or jq parsing failed"
            gh issue list --repo "$GITHUB_REPOSITORY" --label "automated" --limit 5
          }
          
          echo ""
          echo "üìã Execution Summary:"
          echo "- Continue CLI: $(npx @continuedev/cli --version 2>/dev/null && echo '‚úÖ Working' || echo '‚ùå Not working')"
          echo "- PostHog MCP check: $(grep -qi 'posthog' posthog_check.log 2>/dev/null && echo '‚úÖ Mentioned' || echo '‚ùå Not detected')"
          echo "- Analysis: $([ -s analysis.log ] && echo '‚úÖ Generated' || echo '‚ùå Failed')"
          echo "- Issue creation: $([ -s creation.log ] && echo '‚úÖ Attempted' || echo '‚ùå Not attempted')"
          
          # Show diagnostic information
          echo ""
          echo "üîç MCP Initialization Logs:"
          if [ -f init2.log ]; then
            echo "Available tools after initialization:"
            grep -i "tool\|mcp\|function" init2.log | head -5 || echo "No tool mentions found"
          fi
          
          if [ -f posthog_check.log ]; then
            echo ""
            echo "PostHog MCP status:"
            grep -i "posthog" posthog_check.log | head -5 || echo "PostHog not mentioned"
          fi
          
          if [ -f posthog_retry.log ]; then
            echo ""
            echo "PostHog retry attempt:"
            grep -i "posthog" posthog_retry.log | head -3 || echo "PostHog not found in retry"
          fi