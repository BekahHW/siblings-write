name: Diagnose Agent Configuration

on:
  workflow_dispatch:

jobs:
  diagnose:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Continue CLI
        run: |
          echo "üì¶ Installing Continue CLI..."
          npm install @continuedev/cli
          echo "‚úÖ Continue CLI version: $(npx @continuedev/cli --version)"

      - name: Verify Agent Configuration
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "üîç VERIFYING AGENT CONFIGURATION"
          echo "================================="
          
          echo "1. Testing with specified agent slug:"
          echo "-------------------------------------"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Please tell me:
          1. What is your assistant/agent name from your configuration?
          2. What version are you?
          3. What models are configured for you?
          4. What MCP servers are configured (not just available tools)?
          5. What rules are you following?
          6. What prompts do you have access to?
          " 2>&1 | tee agent_info.log
          
          echo ""
          echo "2. Asking about configuration source:"
          echo "-------------------------------------"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Tell me about your configuration:
          - Are you using a configuration from Continue Hub or a local file?
          - What is the exact name of your configuration?
          - If from Hub, what is the slug/identifier?
          - Can you see any mcpServers in your configuration?
          " 2>&1 | tee config_source.log
          
          echo ""
          echo "3. Direct MCP server query:"
          echo "---------------------------"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Looking at your internal configuration:
          - Do you see 'mcpServers' defined?
          - Is there a 'posthog/posthog-mcp' entry?
          - What environment variables or secrets should be available for MCP?
          - Are there any MCP connection errors in your initialization?
          " 2>&1 | tee mcp_config.log

      - name: Test Without Config Flag
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "üîÑ TESTING WITHOUT --config FLAG"
          echo "================================="
          
          echo "What happens without specifying config:"
          npx @continuedev/cli -p "What agent/assistant configuration are you using?" 2>&1 | tee no_config.log

      - name: Compare TUI vs Headless Initialization
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "üî¨ COMPARING INITIALIZATION MODES"
          echo "=================================="
          
          echo "Creating a test script to simulate TUI initialization..."
          cat > test_init.js << 'EOF'
          const { spawn } = require('child_process');
          
          console.log("Testing initialization differences...\n");
          
          // Test 1: Headless mode (what we're using)
          console.log("1. HEADLESS MODE (-p flag):");
          console.log("----------------------------");
          const headless = spawn('npx', [
            '@continuedev/cli',
            '--config', 'continuedev/awesome-models-posthog-gh',
            '-p', 'List your configuration name and MCP servers'
          ], { env: process.env });
          
          headless.stdout.on('data', (data) => {
            process.stdout.write(`[HEADLESS] ${data}`);
          });
          
          headless.on('close', (code) => {
            console.log(`\nHeadless process exited with code ${code}\n`);
            
            // Test 2: Try to simulate TUI mode initialization
            console.log("2. SIMULATED TUI MODE (stdin interaction):");
            console.log("-------------------------------------------");
            const tui = spawn('npx', [
              '@continuedev/cli',
              '--config', 'continuedev/awesome-models-posthog-gh'
            ], { env: process.env });
            
            // Send a command after initialization
            setTimeout(() => {
              tui.stdin.write('List your configuration name and MCP servers\n');
              setTimeout(() => {
                tui.kill();
              }, 5000);
            }, 3000);
            
            tui.stdout.on('data', (data) => {
              process.stdout.write(`[TUI] ${data}`);
            });
            
            tui.on('close', () => {
              console.log("\nTUI process terminated");
            });
          });
          EOF
          
          timeout 30s node test_init.js 2>&1 | tee init_comparison.log || echo "Test completed"

      - name: Check for Configuration Loading Issues
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "üêõ CHECKING FOR CONFIG LOADING ISSUES"
          echo "======================================"
          
          echo "Testing if the agent can see its own configuration details:"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "
          Based on the YAML configuration for 'Awesome Models for PostHog + GH Issues':
          - Version should be: 1.0.64
          - Models should include: anthropic/claude-4-sonnet
          - MCP servers should include: posthog/posthog-mcp
          - Rules should include: bekahhw/env-vars
          
          Do you see these in your configuration?
          " 2>&1 | tee config_check.log

      - name: Summary Analysis
        if: always()
        run: |
          echo "üìä DIAGNOSTIC SUMMARY"
          echo "====================="
          
          echo ""
          echo "üîç Configuration Detection:"
          
          if [ -f agent_info.log ]; then
            echo "Agent name mentioned:"
            grep -i "awesome\|posthog\|gh.*issue" agent_info.log | head -2 || echo "  Not found"
          fi
          
          if [ -f config_source.log ]; then
            echo ""
            echo "Configuration source:"
            grep -i "hub\|local\|slug" config_source.log | head -2 || echo "  Not detected"
          fi
          
          if [ -f mcp_config.log ]; then
            echo ""
            echo "MCP servers detected:"
            grep -i "mcp\|posthog" mcp_config.log | head -3 || echo "  None mentioned"
          fi
          
          if [ -f config_check.log ]; then
            echo ""
            echo "Expected configuration elements:"
            grep -i "1.0.64\|claude-4\|posthog.*mcp\|yes" config_check.log | head -3 || echo "  Not confirmed"
          fi
          
          echo ""
          echo "üí° KEY FINDINGS:"
          echo "----------------"
          echo "1. The agent should be: 'Awesome Models for PostHog + GH Issues' v1.0.64"
          echo "2. It should have posthog/posthog-mcp in mcpServers"
          echo "3. Working in TUI but not headless suggests initialization timing issue"
          echo "4. The agent config IS on Continue Hub at: continuedev/awesome-models-posthog-gh"
          echo ""
          echo "üîß LIKELY ISSUE:"
          echo "The MCP servers defined in the Hub agent are not being initialized properly"
          echo "in headless mode. This is a Continue CLI bug where headless mode doesn't"
          echo "wait long enough for Hub-configured MCP servers to connect."