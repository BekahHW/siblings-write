name: Debug Agent Loading in Headless Mode

on:
  workflow_dispatch:

jobs:
  debug-agent:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Continue CLI with Debug Output
        run: |
          echo "üì¶ Installing Continue CLI..."
          npm install @continuedev/cli
          echo "‚úÖ Continue CLI version: $(npx @continuedev/cli --version)"
          
          # Check if the package has debug capabilities
          echo ""
          echo "Checking for debug environment variables:"
          npx @continuedev/cli --help 2>&1 | grep -i "debug\|verbose" || echo "No debug flags found in help"

      - name: Test Agent Loading with Verbose/Debug Mode
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
          # Try various debug environment variables
          DEBUG: "*"
          NODE_ENV: "development"
          CONTINUE_DEBUG: "true"
          VERBOSE: "true"
        run: |
          echo "üîç TESTING AGENT LOADING WITH DEBUG OUTPUT"
          echo "==========================================="
          
          echo "1. Test with verbose flag if available:"
          echo "---------------------------------------"
          npx @continuedev/cli --verbose --config continuedev/awesome-models-posthog-gh -p "What is your agent name and version?" 2>&1 | tee verbose_test.log || echo "Verbose flag may not exist"
          
          echo ""
          echo "2. Test with debug environment:"
          echo "-------------------------------"
          DEBUG="*" npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "What is your agent configuration name?" 2>&1 | tee debug_test.log
          
          echo ""
          echo "3. Check stderr for hidden debug output:"
          echo "----------------------------------------"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "List your configuration" 2>&1 | tee full_output.log

      - name: Test Different Agent Slug Formats
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "üîÑ TESTING DIFFERENT CONFIG FORMATS"
          echo "===================================="
          
          echo "1. With owner/name format:"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "What agent are you?" 2>&1 | tee format1.log
          
          echo ""
          echo "2. With slug:// prefix:"
          npx @continuedev/cli --config "slug://continuedev/awesome-models-posthog-gh" -p "What agent are you?" 2>&1 | tee format2.log || echo "slug:// format may not be supported"
          
          echo ""
          echo "3. With full URL:"
          npx @continuedev/cli --config "https://hub.continue.dev/continuedev/awesome-models-posthog-gh" -p "What agent are you?" 2>&1 | tee format3.log || echo "URL format may not be supported"

      - name: Check Continue CLI Internal State
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "üî¨ CHECKING CLI INTERNAL STATE"
          echo "==============================="
          
          # Create a test script to inspect the CLI behavior
          cat > debug_cli.js << 'EOF'
          const { spawn } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          
          console.log("Debugging Continue CLI initialization...\n");
          
          // Check for Continue config directory
          const homeDir = process.env.HOME || process.env.USERPROFILE;
          const continueDir = path.join(homeDir, '.continue');
          
          console.log("Continue directory:", continueDir);
          if (fs.existsSync(continueDir)) {
            console.log("Contents:", fs.readdirSync(continueDir));
          } else {
            console.log("Continue directory doesn't exist");
          }
          
          // Run CLI with timing
          console.log("\nRunning CLI with config...");
          const startTime = Date.now();
          
          const cli = spawn('npx', [
            '@continuedev/cli',
            '--config', 'continuedev/awesome-models-posthog-gh',
            '-p', 'What is the name field in your configuration?'
          ], {
            env: process.env,
            stdio: ['pipe', 'pipe', 'pipe']
          });
          
          let stdout = '';
          let stderr = '';
          
          cli.stdout.on('data', (data) => {
            stdout += data.toString();
            process.stdout.write(data);
          });
          
          cli.stderr.on('data', (data) => {
            stderr += data.toString();
            process.stderr.write(data);
          });
          
          cli.on('close', (code) => {
            const duration = Date.now() - startTime;
            console.log(`\nProcess exited with code ${code} after ${duration}ms`);
            
            if (stderr) {
              console.log("\nStderr output:");
              console.log(stderr);
            }
            
            // Check if configuration was mentioned
            if (stdout.includes('Awesome Models') || stdout.includes('PostHog')) {
              console.log("\n‚úÖ Agent configuration appears to be loaded");
            } else {
              console.log("\n‚ùå Agent configuration not detected in output");
            }
          });
          EOF
          
          node debug_cli.js 2>&1 | tee cli_debug.log

      - name: Test with Explicit Wait for MCP
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "‚è±Ô∏è TESTING WITH EXPLICIT MCP WAIT"
          echo "=================================="
          
          echo "Attempting to give MCP time to load..."
          
          # Try multiple sequential calls to see if state persists
          echo "Call 1: Initialize"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "Initialize" 2>&1 | head -5
          
          echo ""
          echo "Waiting 15 seconds..."
          sleep 15
          
          echo "Call 2: Check configuration"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "What is your configuration name and version?" 2>&1 | tee config_after_wait.log
          
          echo ""
          echo "Call 3: Check MCP"
          npx @continuedev/cli --config continuedev/awesome-models-posthog-gh -p "List any MCP servers you have" 2>&1 | tee mcp_after_wait.log

      - name: Check Network Connectivity to Continue Hub
        run: |
          echo "üåê CHECKING CONTINUE HUB CONNECTIVITY"
          echo "======================================"
          
          echo "1. Testing API endpoint:"
          curl -s -o /dev/null -w "HTTP Status: %{http_code}, Time: %{time_total}s\n" \
            "https://api.continue.dev/agents/continuedev/awesome-models-posthog-gh" || echo "Failed to reach API"
          
          echo ""
          echo "2. Fetching agent configuration:"
          curl -s "https://api.continue.dev/agents/continuedev/awesome-models-posthog-gh" 2>&1 | head -20 || echo "Failed to fetch config"
          
          echo ""
          echo "3. Testing hub.continue.dev:"
          curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" \
            "https://hub.continue.dev/continuedev/awesome-models-posthog-gh" || echo "Failed to reach hub"

      - name: Summary Analysis
        if: always()
        run: |
          echo "üìä DEBUG SUMMARY"
          echo "================"
          
          echo ""
          echo "üîç Agent Loading Results:"
          
          for file in verbose_test.log debug_test.log format1.log format2.log format3.log config_after_wait.log mcp_after_wait.log; do
            if [ -f "$file" ]; then
              echo ""
              echo "$file:"
              grep -i "awesome\|posthog\|mcp\|version\|name" "$file" | head -3 || echo "  No relevant content found"
            fi
          done
          
          echo ""
          echo "üí° DIAGNOSIS:"
          echo "------------"
          echo "1. Check if agent name 'Awesome Models for PostHog + GH Issues' appears anywhere"
          echo "2. Check if version '1.0.64' is mentioned"
          echo "3. Check if 'posthog/posthog-mcp' is listed as an MCP server"
          echo "4. Check if the agent is falling back to a default configuration"
          echo ""
          echo "üêõ POTENTIAL ISSUES:"
          echo "- Hub agent configuration not being fetched in headless mode"
          echo "- MCP servers from Hub config not being initialized"
          echo "- Timeout issue: headless mode exits before MCP can connect"
          echo "- Authentication issue: API key not being used for Hub config fetch"
          echo "- The --config flag might not work properly with Hub slugs in headless mode"