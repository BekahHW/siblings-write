name: PostHog Analysis Test MVP

on:
  workflow_dispatch: # Allow manual triggering for testing
  schedule:
    - cron: "0 6 * * *" # Run at 6 AM UTC daily

jobs:
  posthog-test:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Continue CLI
        run: npm install -g @continuedev/cli@1.4.30

      - name: Test Continue CLI Installation
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "Testing Continue CLI installation..."
          if ! cn --version; then
            echo "‚ùå Continue CLI not found or not working"
            exit 1
          else
            echo "‚úÖ Continue CLI version: $(cn --version)"
          fi

      - name: Validate API Key
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          if [ -z "$CONTINUE_API_KEY" ]; then
            echo "‚ùå CONTINUE_API_KEY environment variable is not set"
            exit 1
          else
            echo "‚úÖ CONTINUE_API_KEY is configured"
          fi

      - name: Verify Continue Account
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "Checking Continue account authentication..."
          
          # Get current account info
          if cn -p whoami > account_info.txt 2>account_error.log; then
            echo "‚úÖ whoami command executed successfully"
            echo "Account info:"
            cat account_info.txt
            
            # Check if logged in as bekah@continue.dev
            if grep -q "bekah@continue.dev" account_info.txt; then
              echo "‚úÖ Logged in as bekah@continue.dev - CORRECT ACCOUNT"
            else
              echo "‚ùå NOT logged in as bekah@continue.dev"
              echo "Current account:"
              cat account_info.txt
              echo ""
              echo "ERROR: Must be logged in as bekah@continue.dev for PostHog integration to work"
              echo "Please ensure the CONTINUE_API_KEY belongs to bekah@continue.dev"
              exit 1
            fi
          else
            echo "‚ùå Failed to get account information"
            echo "Error log:"
            cat account_error.log
            echo ""
            echo "Possible issues:"
            echo "- Invalid CONTINUE_API_KEY"
            echo "- Not authenticated with Continue service"
            echo "- Network connectivity issues"
            exit 1
          fi

      - name: Test Basic Agent Response
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "Testing basic agent response..."

          # Create a simple test prompt
          cat > test_prompt.txt << 'EOF'
          Hello! This is a test. Please respond with:
          1. Your name/identity
          2. Current timestamp
          3. Confirm you can respond
          Keep it brief.
          EOF

          echo "Prompt content:"
          cat test_prompt.txt
          echo "=================================="

          # Test with timeout
          if timeout 30s cn -p "@test_prompt.txt" > basic_response.md 2>basic_error.log; then
            echo "‚úÖ Basic agent test SUCCESS"
            echo "Response:"
            cat basic_response.md
          else
            echo "‚ùå Basic agent test FAILED"
            echo "Error log:"
            cat basic_error.log
            exit 1
          fi

      - name: Test PostHog Config Loading
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "Testing PostHog config loading..."

          # Create PostHog config test prompt
          cat > posthog_config_test.txt << 'EOF'
          Hello! I'm testing if you can load the PostHog configuration.
          Please respond with:
          1. Can you access PostHog configurations?
          2. What PostHog capabilities do you have?
          3. Are you configured for PostHog analysis?
          Keep response brief.
          EOF

          echo "PostHog config test prompt:"
          cat posthog_config_test.txt
          echo "=================================="

          # Test PostHog config with timeout
          if timeout 45s cn --config continuedev/awesome-models-posthog-gh -p "@posthog_config_test.txt" > posthog_config_response.md 2>posthog_config_error.log; then
            echo "‚úÖ PostHog config test SUCCESS"
            echo "Response:"
            cat posthog_config_response.md
          else
            echo "‚ùå PostHog config test FAILED"
            echo "Error log:"
            cat posthog_config_error.log
            exit 1
          fi

      - name: Test PostHog Data Connection
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "Testing PostHog data connection..."

          # Create PostHog connection test prompt
          cat > posthog_connection_test.txt << 'EOF'
          Please test your PostHog connection and report:
          1. Can you connect to PostHog?
          2. What PostHog instance are you connected to?
          3. Can you see any data/events?
          4. What permissions do you have?

          DO NOT perform any analysis yet - just test connectivity.
          Keep response brief and factual.
          EOF

          echo "PostHog connection test prompt:"
          cat posthog_connection_test.txt
          echo "=================================="

          # Test PostHog connection with timeout
          if timeout 60s cn --config continuedev/awesome-models-posthog-gh -p "@posthog_connection_test.txt" > posthog_connection_response.md 2>posthog_connection_error.log; then
            echo "‚úÖ PostHog connection test SUCCESS"
            echo "Response:"
            cat posthog_connection_response.md
          else
            echo "‚ùå PostHog connection test FAILED"
            echo "Error log:"
            cat posthog_connection_error.log
            exit 1
          fi

      - name: Test Session Recording Access
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "Testing PostHog session recording access..."

          # Create session recording test prompt
          cat > session_recording_test.txt << 'EOF'
          Please check your access to PostHog session recordings:
          1. Can you access session recordings?
          2. How many sessions can you see?
          3. What date range of recordings is available?
          4. Any limitations on access?

          DO NOT analyze sessions yet - just verify access.
          Keep response brief.
          EOF

          echo "Session recording test prompt:"
          cat session_recording_test.txt
          echo "=================================="

          # Test session recording access with timeout
          if timeout 90s cn --config continuedev/awesome-models-posthog-gh -p "@session_recording_test.txt" > session_access_response.md 2>session_access_error.log; then
            echo "‚úÖ Session recording access test SUCCESS"
            echo "Response:"
            cat session_access_response.md
          else
            echo "‚ùå Session recording access test FAILED"
            echo "Error log:"
            cat session_access_error.log
            exit 1
          fi

      - name: Run Minimal PostHog Analysis
        env:
          CONTINUE_API_KEY: ${{ secrets.CONTINUE_API_KEY }}
        run: |
          echo "Running minimal PostHog analysis..."

          # Create minimal analysis prompt
          cat > minimal_analysis.txt << 'EOF'
          Now please perform a very brief analysis:
          1. Look at the 3 most recent PostHog sessions
          2. Identify 1-2 obvious UX issues (if any)
          3. Provide a short summary

          DO NOT create GitHub issues - just provide analysis.
          Keep response under 500 words.
          EOF

          echo "Minimal analysis prompt:"
          cat minimal_analysis.txt
          echo "=================================="

          # Run minimal analysis with longer timeout
          if timeout 120s cn --config continuedev/awesome-models-posthog-gh -p "@minimal_analysis.txt" > analysis_response.md 2>analysis_error.log; then
            echo "‚úÖ Minimal analysis SUCCESS"
            echo "Analysis Response:"
            cat analysis_response.md
          else
            echo "‚ùå Minimal analysis FAILED"
            echo "Error log:"
            cat analysis_error.log
            exit 1
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: posthog-test-results
          path: |
            *.md
            *_error.log
          retention-days: 7

      - name: Test Results Summary
        if: always()
        run: |
          echo "=================================="
          echo "üß™ PostHog Integration Test Summary"
          echo "=================================="
          echo "‚úÖ Tests that passed will show above"
          echo "‚ùå Any failures will have stopped the workflow"
          echo ""
          echo "üìÅ All test responses uploaded as artifacts"
          echo "üîç Check artifacts for detailed responses"
          echo "=================================="
